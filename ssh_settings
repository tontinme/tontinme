------dsh(代替ssh管理大量计算机)
------pssh(并行的ssh)
------putty中文显示
------ssh挂载远程目录文件系统
------ssh后台执行远程命令
------比较本地和远程文件
------从某主机的80端口开启到本地主机2001端口的隧道
------端口转发
------复制ssh密钥到目标主机
------连接成功后运行命令
------使用别名
------通过authorized_keys指定登录后要执行的命令
------通过中间主机建立ssh连接
------ssh代理

#dsh(代替ssh管理大量计算机)
	dsh(Distributed Shell)是专为在远程系统上运行shell命令设计的，可以简化对大量计算机的操作
	$dsh [-m machinename |-a | -g groupname ] [ -r remoteshellname ] [ -c | -w | -i | -F forklime ] -- commandline
	eg.
	  	$dsh --show-machine-names -m aws -m linode -- uptime
	  	#用-m指定主机，主机名的规则与ssh相同，命令行中的双连字符把dsh命令本身的选项与要运行的命令分隔开
	  		#--show-machine-names选项在远程命令发出的输出前面加上主机名
	dsh -a
	  	指定-a，就会在$HOME/.dsh/machines.list中列出的所有主机上运行指定的命令
	dsh -g groupname
	  	可以在$HOME/.dsh/group/groupname文件中创建更小或专门的计算机集合，其中groupname是您指定的有意义的名称
	dsh --file filename
	  	在filename中列出的主机列表上执行命令
	--wait-shell  
	  	dsh在默认情况下并行的运行命令，如果希望顺序执行，加上--wait-shell
	#dsh无法复制文件
#pssh(并行的ssh)
	除了具备dsh的所有功能之外，pssh还可以把文件从一组系统复制到中心服务器或反向复制，以及杀死一组系统上的进程
	pssh包含五个实用程序
		parallel-ssh	在多个主机上并行的运行命令
		parallel-scp	把文件并行的复制到多个主机上
		parallel-rsync	通过rsync协议把文件高效的并行复制到多个主机上
		parallel-slurp	把文件并行的从多个远程主机复制到中心主机上
		parallel-nuke	并行的在多个远程主机上杀死进程
	与dsh不同，pssh总是通过清单文件指定主机，其中的每行采用host[:port] [user]形式
		eg. $parallel-ssh -h servers.txt uptime
	默认情况下，pssh输出在stdout中，可以用--outdir /PATH/SPECIFIC_DIR指定输出文件
	parallel-ssh可以生成最多32个进程，并行的连接到各个节点，如果远程命令在60s内没有完成，连接会终止
	可以用-t设置更长的时间(parallel-scp和parallel-rsync没有默认的到期时间，但有-t参数)
	parallel-slurp把文件的每个拷贝存储在按远程主机命名的子目录中，不会覆盖本地的相应文件
	parallel-nuke相当于运行ssh host killall
#putty中文显示
	打开putty主程序，选择window-〉Appearance-〉Font settings-〉Change...,选择Fixedsys字体,字符集选择CHINESE_GB2312。
在window-〉Appearance-〉Translation中，Received data assumed to be in which character set 中,把Use font encoding改为UTF-8.
如果经常使用,把这些设置保存在session里面.
	现在打开putty,登录成功后,在shell中输入:export LC_ALL='zh_CN.utf8',现在已经可以完美的支持中文了
	可以打开vim输入中文测试一下,而且也不会出现删除半个汉字的问题.
#ssh挂载远程目录文件系统
	sshfs 可以把ssh连接到的主机资源，映射到本机的文件系统中。然后用户可以像操作本地文件一样操作，而实际的\
		文件改动将通过ssh传输到远程主机当中
	$sshfs user@hostname:path local_mount_path
	卸载目录
	$fusermount -u local_mount_path
	也可以在/etc/fstab中自动挂载
#ssh后台执行远程命令
	适用于本机上没有dsh和pssh等工具时，需要在大批量机器上执行的程序
	因为for循环执行远程命令是顺序执行，所以如果for循环时将命令放在后台能有效的减少执行时间
	EXAMPLE：
		for i in 101 102; do ssh 192.168.1.$i "nohup /bin/bash -c \"/bin/bash /home/cinder/XXX.sh >/dev/null 2>&1 </dev/null &\"; exit 0"; done
	需要注意几点：
		1.要将所执行命令的0,1,2都重定向，example中都重定向到了/dev/null
		2.ssh后接的command要用双引号，使用单引号可能会报错
	使用fg命令可以将后台命令切换回前台
	<Ctrl>-z将命令切换回后台
	使用bg命令查看当前后台运行的命令
#比较本地和远程文件
	$vimdiff cat /path/localfile <( ssh user@host 'cat /path/remotefile')
	OR
	$ssh user@host 'cat /path/remotefile' | vimdiff /path/localfile -
#从某主机的80端口开启到本地主机2001端口的隧道
	$ssh -N -L2001:localhost:80 somemachin
	现在你可以直接在浏览器中输入http://localhost:2001访问这个网站
#端口转发
	ssh -D 8888 username@proxyhost.com -N
	-D	建立一个动态的SOCKS4/5的代理通道，紧接着的是本地监听的端口号。
	-N	不执行远程的命令。这个参数在这里是可选的。
#复制ssh密钥到目标主机
	$ssh-copy-id user@host
		install your public key in a remote machine's authorized_keys    '
		-i 可以指定某个公钥
	如果没有ssh-copy-id命令
	$cat ~/.ssh/id_rsa.pub | ssh user@machine "mkdir ~/.ssh; cat >> ~/.ssh/authorized_keys"
#连接成功后运行命令
	#只想运行单个命令的话，直接把命令附加在ssh命令之后即可。如：
		$ssh freebsd uname -a
		Linux bebop 2.6.32-24-generic #39-Ubuntu SMP Wed Jul 28 05:14:15 UTC 2010 x86_64 GNU/Linux
	#但有些命令可能会报错，如"top"，这时只需加上“-t”参数就行了
#使用别名
	#更改~/.ssh/config，比如：
	Host bob
    		HostName bob.example.com
    		Port 2222
    		User wdaher
		IdentityFile ~/.ssh/bob

	Host alice
    		HostName alice.example.com
    		Port 8183
    		User waseem
		IdentityFile ~/.ssh/alice

	Host self
    		HostName wsd.example.com
    		Port 31337
    		User waseemio
		IdentityFile ~/.ssh/self
	Host github.com		#github的Host必须写成github.com
		HostName github.com
		User git
		IdentityFile ~/.ssh/github
	#连接时，就变成这样了
	ssh bob
	ssh alice
	ssh self
	ssh github.com
#通过authorized_keys指定登录后要执行的命令
	#该命令定义在authorized_keys中，ssh连上后，只能执行该命令，并且执行完后立即退出。比如：
		from="10.1.1.1",command="/home/remoteuser/command" ssh-dss AAAA...(其中ssh-dss AAAA...就是原有的public key了)	
#通过中间主机建立ssh连接
	$ssh -t reachable_host ssh unreachable_host
	unreachable_host表示从本地网络无法直接访问的主机，但可以从reachable_host所在网络访问

#ssh代理

    反向代理
        #将本机的22端口代理到226上面的localhost:6666
        ssh -NTfC -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -R 6666:localhost:22 tian@123.59.92.226
        #将本机的19088端口代理到226上面的226:19088
        ssh -NTfC -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -R 123.59.92.226:19088:localhost:19088 tian@123.59.92.226
    正向代理
        #将144.39上的5901端口代理到本地
        ssh -gNf -L 5901:127.0.0.1:5901 root@10.125.144.39
        #将133.8上的19088端口代理到本地。其中本地能访问132.2，132.2能访问132.8的19088端口
        ssh -gNf -L 19088:10.106.133.8:19088 root@10.106.132.2
        #建立本机到gcp-instance的隧道。浏览器设置socks proxy，这样浏览器访问的所有流量将通过gcp-instance转发出去
        ssh -gNf -D 127.0.0.1:8011 gcp-instance
    使用systemd自动开启
    ```
    # cat /usr/lib/systemd/system/ssh-tunnel@.service
    [Unit]
    Description=Setup a secure tunnel to %I
    After=network.target
    
    [Service]
    Environment="LOCAL_ADDR=localhost"
    EnvironmentFile=/etc/default/secure-tunnel@%i
    #ExecStart=/usr/bin/ssh -NT -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -L ${LOCAL_ADDR}:${LOCAL_PORT}:localhost:${REMOTE_PORT} ${TARGET}
    ExecStart=/usr/bin/ssh -NTC -o ServerAliveInterval=60 -o ExitOnForwardFailure=yes -o StrictHostKeyChecking=no -R ${REMOTE_PORT}:localhost:${LOCAL_PORT} ${TARGET}
    
    # Restart every >2 seconds to avoid StartLimitInterval failure
    RestartSec=5
    Restart=always
    
    [Install]
    WantedBy=multi-user.target

    # cat /etc/default/secure-tunnel\@qcloud
    TARGET=qcloud
    LOCAL_PORT=localhost
    LOCAL_PORT=22
    REMOTE_PORT=6666
    ```

    systemctl start ssh-tunnel@qcloud.service
    systemctl status ssh-tunnel@qcloud.service
    systemctl enable ssh-tunnel@qlcoud.service
