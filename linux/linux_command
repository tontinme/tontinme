#!/bin/bash
---Index
------adduser&useradd
------acct
------at
------alias
------chattr(lsattr)
------chroot
------cp
------crontab
------dd
------df
------dmidecode
------du
------exec
------expect
------find
------free
------grep,pgrep,egrep,fgrep
------iostat
------ip
------iptraf
------ls
------lsblk
------lscpu
------lsof
------man
------mpstat
------netstat
------nmon
------od
------paste
------pmap
------ps
------rpm
------rsync
------sar
------screen
------sort
------ss
------strace
------su & sudo
------tail
------tcpdump
------tmpwatch
------top
------ulimit
------uptime
------vmstat
------w
------watch
------wget
------whoami,id,groups,newgrp
------xargs
------zip,tar.gz,tar.bz2
------管道 |

#adduser&useradd
	#Debian/Ubuntu
		useradd is a command itself, and you can create users and define options to them using this \
			command.
		adduser is a perl command, that uses useradd to create the account. asking you the password \
			full-name,phone, and others...
	#Fedora/Centos
		adduser is just a symbolic link to useradd, but may try to copy the script from a Debian system\
			to the Centos one
	#Gentoo
		on Gentoo systems, is the same as in Centos or Fedora, adduser is just a symbolic link to useradd
	#使用
		请咨询man手册
#acct/psacct
	acct/psacct是一个工具包，里面包含有针对用户连接时间，进程执行情况等进行统计的工具。它可以记录用户登录的信息，
		用户所执行的程序，程序执行情况信息等
	linux下acct/psacct安装后，会建立一个/var/account/pacct的文件，保存各种信息
	该工具包提供了多个进程活动监视工具
		ac		显示用户连接时间的统计
		lastcomm	显示系统执行的命令
		accton		用于打开/关闭进程记账功能
		sa		统计系统进程记账的情况
#at
	at命令允许用户向cron守护提交作业，使其在稍后的时间运行。
	一旦一个作业被提交，at命令将会保留所有当前的环境变量。不像crontab，只提供缺省的环境。
	该作业的所有输出都将以电子邮件形式发送给用户，除非你对其输出进行了重定向。
	和crontab一样，根用户可以通过/etc目录下的at.allow和at.deny文件来控制哪些用户可以使用at命令。
	at [-f script][-m -l -r][time][date]
		-f script	所要提交的命令或脚本
		-l 		列出当前所有等待运行的作业。$at q 具有相同的作用
		-r		清除作业。为了清除某个作业，还要提供相应的作业标识ID；有些linux变体只接受$at rm作为
					清除命令
		-m		作业完成后给用户发邮件
	at的时间格式非常灵活：可以是H、HH、HHMM、HH:MM或者H:M，其中H和M分别是小时和分钟。还可以使用am或pm
	使用at提交命令
		可以通过命令行方式，也可以使用at命令提示符($at 21:00)
		eg. $at 3.00pm tomorrow -f example.sh
#alias
	#工作中可能会经常删除一些core文件，可以这样定义到profile文件
		$alias rmcore="find . iname core -exec rm {} \;"	#iname表示忽略大小写
	#工作中可能经常要删除一些log文件，可以这样定义：
		$alias rmlog="find /logs -type f -name *.tar -size +500M -exec rm -i {} \;"
		$alias rmlg="find / -type f -name *.tar -size +1G -exec rm -i {} \;"
#chattr
	$chattr [ -RVf ] [ -v version ] [ mode ] files...
	#chattr可以改变linux文件系统的文件属性
	-R	递归执行，即包括子目录
	-V	输出详细信息
	-f	隐藏一般的出错信息
	#The format of a symbolic mode is +-=[acdeijstuADST]
		+	add attributes
		-	remove attributes
		=	specify the only attributes
		#mode
		a	append only，只能向文件中添加数据，而不能删除
		c	compressed，设定文件是否压缩后再存储，读取时需经过自动解压操作
		d	no dump，设定文件不能称为dump程序的备份目标
		e	extent format，文件或目录的默认属性
		i	immutable，设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容
		j	data journalling
		s	secure deletion，保密性的删除文件或目录，即硬盘空间被全部收回
		u	与s相反，数据内容其实还在磁盘中，可以用于undeletion
		...
		#get more information from manual
	#lsattr
		另外还有lsattr来显示文件或目录的当前属性
#chroot
	#即change root directory，经过chroot后，系统读取到的目录和文件将不再是旧系统根下的而是新\
		根下（即被指定的新的位置）的目录结构和文件，因此带来三个好处：
		1. 增加了系统的安全性，限制了用户的权利
		2. 建立一个与原系统隔离的系统目录结构，方便用户的开发
		3. 切换系统的根目录位置，引导linux系统启动以及急救系统等。
#cp
	#取消覆盖提示
		有时使用$cp -f file dir，系统仍然会有覆盖提示
		原因是系统将cp命令alias为cp -i
		两种解决办法：
			1.修改该alias	仅针对当前用户的，在用户的home目录下修改.bashrc即可
			  		针对全局的，修改/etc/bashrc
			2.使用如下命令	$\cp -f file dir #crontab #注意：
	  最好建立一个crontab的副本进行编辑，然后执行
	  $crontab ${NAME_CRON}
	  导入配置防止对crontab的误删操作
	系统管理员通过cron.deny和cron.allow这两个文件来禁止或允许用户拥有自己的crontab文件。
	-u	用户名
	-e 	编辑crontab文件
	-l	列出crontab文件的内容
	-r	删除crontab文件
	#field		allowed values
	minute		0-59		#每分钟用*或*/1表示
	hour		0-23		#0表示0点
	day of month	1-31
	month		1-12 (or names)
	day of week	0-7 (0 or 7 is Sun, or use names)
	#crontab [-e [UserName] | -l [UserName] | -r [UserName] | -v [UserName] | File]
		-e [Username]:执行文字编辑器来设定时程表，内定的文字编辑器是vi，可以设定VISUAL环境变量来指定\
			使用那个文字编辑器（比如setenv VISUAL joe）
	#使用访问控制列表(ACL)--/etc/cron.allow`和/etc/cron.deny--允许或拒绝特定用户运行cron作业
	#在一天做N次的计划任务
		#以下例子代表在12点和18点执行任务
		00 12，18 * * * /home/tontinme/test.sh	
	#在一天的特定时间段的计划任务
		#以下代表在12点到18点的每个小时的整点执行脚本
		00 12-18 * * * /home/tontinme/test.sh
		#以下代表在工作日（不包括周六日）的12点到18点的整点执行脚本
	#查看root以外用户的计划任务内容	
		#编辑使用-e选项
		#crontab -u tontinme -l
		00 12,18 * * * /home/tontinme/test.sh	
	#在相隔时间后执行计划任务
		#以下表示每10分钟执行一次任务
		*/10 * * * * /home/tontinme/test.sh
	#某特定相隔时间的计划任务
		#以下表示每年的第一分钟执行脚本
		@yearly /home/tontinme/test.sh
			#使用@yearly对应的是0 * * * *,还有如下可用：
			@reboot		run once, at startup
			@yearly		run once a year, "0 0 1 1 *"
			@annually	same as @yearly
			@monthly	run once a month, "0 0 1 * *"
			@weekly		run once a week, "0 0 * * 0"
			@daily		run once a day, "0 0 * * *"
			@midnight	same as @daily
			@hourly		run once an hour, "0 * * * *"
		#这里特别强调@reboot,可以设定重启后执行。
	#以秒为单位执行计划任务
		#以下表示每20秒执行一次：
		* * * * * sleep 20; /home/tontinme/test.sh
	#其他实例
		#晚上11点到早上7点之间，每隔一小时执行一次脚本
		* 23-7/1 * * * /home/tontinme/test.sh
		#每月的4号与每周一到周三的11点执行脚本
		0 11 4 * mon-wed /home/tontinme/test.sh
		#一月一号的4点执行脚本
		0 4 1 jan * /home/tontinme/test.sh
	#crontab无法运行分析
		1.crontab是nologin shell，运行时的一些环境变量与直接登录后在命令行下运行不同所致。
		  crontab默认调用PATH是/usr/local/sbin:/sbin:/bin:/usr/sbin:/usr/bin或者更少。
		  解决办法：
			所有命令和工具使用绝对路径，或者在脚本前面执行一下profile文件：source ~/.bash_profile
		2.添加在crontab中的命令含有%，%在crontab上有特殊意义，不同的shell对crontab的实现有差异，因此\
			为了安全起见，应该在命令中对%进行转义，或者尽量不要在crontab中使用%。
		3.crontab添加任务时最好将输出(标准输出和错误输出)重定向(2>&1)，没有输出可以重定向到/dev/null,否则crontab将输出以mail的\
			方式发送给你。并且有些程序没有重定向输出会导致执行失败。
#dd
	作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换
		可以用于生成虚拟块设备文件。即可以用于创建空镜像文件，也可以用于创建物理硬盘的镜像
	#部分参数说明
		if=file		输入文件名，缺省为标准输入
		of=file		输出文件名，缺省为标准输出
		bs=bytes	同时设置读写块的大小为bytes,可代替ibs和obs(ibs-一次读入bytes个字节；obs-一次写入bytes个字节)
		count=blocks	仅拷贝blocks个块，块大小等于ibs指定的字节数
	#eg.造一个1G的虚拟块设备文件
		dd if=/dev/zero of=1G.img bs=1M count=1000
		#/dev/zero是Linux提供的一个特殊的字符设备，它的特点是可以永远读取该文件，每次读取的结果都是二进制0
		但是这样会实际写入硬盘，文件产生的速度取决于硬盘读写速度，如果想要产生超大文件，速度很慢
		dd if=/dev/zero of=1G.img bs=1M count=0 seek=1000
		#此时创建的文件在文件系统中的显示大小为1G，但是并不实际占用block。
		seek作用是跳过输出文件中指定大小的部分,这就达到了创建大文件，但是并不实际写入的目的
		#注意：
			创建并不实际占用block的大文件后，将其拷贝到新目录，du显示为1G
#df
	df命令可以获取硬盘被占用了多少空间，目前还剩下多少信息等
#dmidecode
    查看内存插槽数，某槽位是否插了内存，容量是多少
        dmidecode|grep -P -A5 "Memory\s+Device"|grep Size|grep -v Range
    查看最大支持内存数
        dmidecode|grep -P 'Maximum\s+Capacity'
    查看槽位上的速率，没插就是unknown
        dmidecode|grep -A16 "Memory Device"|grep 'Speed'
    dmidecode显示指定类型的信息
        dmidecode -t [text|number]
        文本参数支持：
            bios, system, baseboard, chassis, processor, memory, cache, connector, slot
        数字参数支持很多：
            0 - 39
#du
	du的功能是逐级进入指定目录的每一个子目录并显示该目录占用文件系统数据块
	
	1.只查看/根目录的磁盘占用情况，不计算不挂载在/下的目录
	EXAMPLE:
		如果/var/，/opt，/usr没有挂载在/下，那么就不用计算这几个目录
	man du
	-x, --one-file-system
		skip directories on different file systems
#exec
	the exec utility shall open, close, and/or copy file descriptors as specified by ay redirections as part of the command
	If exec is specified without command or arguments, and any file descriptors with number greater than 2 are opened with
		associated redirection statements
	If exec is specified with command, it shall replace the shell with command without creating a new process. If arguments 
		are specified, they shall be arguments to command
	EXAMPLES:
	open readfile as file descriptors 3 for reading:
		exec 3< readfile
	open writefile as file descriptors 4 for writing:
		exec 4> writefile
	make file descriptors 5 a copy of file descriptors 0:
		exec 5<&0
	close file descriptors 3:
		exec 3<&-
	cat the file maggie by replacing the current shell with the cat utility:
		exec cat maggie
#expect
	可以用于实现自动交互
	功能比较简单，不能用于替代shell脚本
	基本语法
		expect	用于读取希望看到的输出，和shell中的read类似
		-exact	为验证一切输入参数，包括\n，\r，\t等字符
		send	发送命令，代替手动输入
		spawn	初始化expect脚本的第一个命令，用于产生一个开始记录的点
		if while for	循环全部使用花括号进行分隔，其余和shell一样
		puts	等同于echo
		设置位置变量	set number [ index $argv 0 ]
	EXAMPLE	(shit,running failed!)
		for {set number=1} {$number <= 100} {incr number +1}
		{
			puts "The number is $number"
		}
#find
	#忽略大小写的查找
		$find -iname 'xxx'
		./xxx
		./XXX
		./Xxx
	#查找文件目录的深度限制（从/开始计算。包括maxdepth和mindepth）
		[root@server test]# find / -name ‘passwd’
		/usr/share/doc/nss_ldap-253/pam.d/passwd
		/usr/bin/passwd
		/etc/pam.d/passwd
		/etc/passwd
		[root@server test]# cd /
		[root@server /]# find -mindepth 3 -maxdepth 3 -name ‘passwd’
		./usr/bin/passwd
		./etc/pam.d/passwd
	#根据文件属性查找
		#查找其中组权限是r的，也可以包括其他权限
		#find . -perm -g=r -type f -exec ls -l {} \;
		—-r—– 1 root root 0 01-08 20:45 ./FAn
		-rwxrwxrwx 1 root root 0 01-08 17:00 ./Fan
		-rw-r—– 1 root root 0 01-08 17:01 ./FAN
		-rw-r–r– 1 root root 0 01-08 17:01 ./fan
		#查找其中组权限是r的，不能包括其他权限
		#find . -perm g=r -type f -exec ls -l {} \;
		—-r—– 1 root root 0 01-08 20:45 ./FAn
	#查找空文件（0字节文件）
		#find ~ -empty
		#注：按照深度去查找，比如我只想查找2层深度的文件
			#find . -maxdepth 2 -empty
			./root/spread-bin-4.0.0
	#工作中可能想要删除一些临时文件，想要删除最大的5个文件，这样查找：
		#find . -type f -exec ls -s {} \; | sort -n -r | head 5
		201424 ./ctier-server-3.6.0-1.noarch.rpm
		14568 ./.cpan/Metadata
		4700 ./ruby-1.8.7.tar.gz
		4316 ./ruby-1.8.7/libruby-static.a
		3372 ./passenger-2.2.11/ext/apache2/ApplicationPoolServerExecutable
	#查找指定文件类型的文件：使用-type选项
	#根据文件修改时间查找
		#ls -lrt
	#指定查找某文件修改时间之前修改或者创建的文件
		#find -newer filename
	#根据文件大小查找
		#比如，查找大于20M的文件
			#find . -size +20M
		#查找小于1M的文件
			#find . -size -1M
	#mtime 文件内容最后一次被修改的时间
	 ctime 文件的i节点最后一次被修改的时间
	 atmie 文件内容的最后访问时间
	 find {-mtime|-ctime|atime} {+N|N|-N}
	 N	每个N代表一天24小时
	 N=0:less than 24 hours ago
	 N=1:between 24 and 48 hours ago
	 N=2:between 49 and 72 hours ago
	 +N 表示当前时间起（N*24+24）小时这个时间点之前
	 -N 表示当前时间向前（N*24）小时至当前时间
	 N  表示当前时间向前（N*24+24）小时到当前时间向前（N*24）小时
	    换句话说，N永远是一个24小时的时间段
	 假设当前时间为2011/08/09/10:33
	 -Xtime +1	48小时之前的结果，即2011/08/07/10:33之前
	 -Xtime 1	距离当前48到24小时的结果，即2011/08/07/10:33--2011/08/08/10:33
	 -Xtime -1	24小时之内的结果，即2011/08/08/10:33--2011/08/09/10:33
	 -Xtime +0	24小时之前的结果，即2011/08/08/10:33之前
	 -Xtime 0	24小时之内的结果，即2011/08/08/10:33--2011/08/09/10:33
	 ---------2011/08/07/10:33---2011/08/08/10:33---2011/08/09/10:33------
	 ---Xtime +1--->|<-----Xtime 1----->|<-----Xtime -1----->|
#free
	#display the total amount of free and used physical and swap memory in the system,\
		as well as the buffers used by the kernel
#grep,pgrep,egrep,fgrep
	#find+xargs+grep	并行grep
	xargs使用-P参数，可以启动多个grep来并发控制
	  eg. find ./ -name "*.log" -print0 | xargs -0 -n1 -P14 grep -H "baidu" > /dev/null
	匹配模式
		[:alnum:]	字母与数字字符
		[:alpha:]	字母
		[:ascii:]	ASCII字符
		[:blank:]	空格或制表符
		[:cntrl:]	ASCII控制字符
		[:digit:]	数字
		[:graph:]	非控制，非空格字符
		[:lower:]	小写字母
		[:print:]	可打印字符
		[:punct:]	标点符号字符
		[:space:]	空白字符，包括垂直制表符
		[:upper:]	大写字母
		[:xdigit:]	十六进制数字
	匹配n次
		{n}	必须匹配n次
		{n,}	必须匹配n次或n次以上
		{n,m}	必须匹配n到m次，包含n和m
	EXAMPLE:
		$grep a[[:blank:]] test.txt	#匹配test.txt中的内容"a "
		$grep -E [a-z]\{10\} test.txt	#匹配test.txt中含10个字母的单词
		$grep Th.[[:space:]] test.txt	#匹配test.txt中的内容，以Th开头，且只含3个字母
	#pgrep
	查看进程的pid，如果有多个pid，以换行符分隔；可以使用-d来指定分隔符
	#egrep
	支持正则表达式的gr, same as grep -E
	#fgrep
	搜索字符串而不是搜索匹配表达式的模式。fgrep 命令使用快速的压缩算法。$, *, [, |, (, ) \
	和 \ 等字符串被 fgrep 命令按字面意思解释。这些字符并不解释为正则表达式，但它们在 grep \
	和egrep命令中解释为正则表达式
#iostat
	report cpu statistics and I/O statistics for devices,partitions and NFS
	使用strace查看iostat从哪里得到的IO相关信息
	  $strace -eopen iostat
	常用的iostat命令格式
	  $iostat -dx 1		#每隔一秒显示一次IO扩展信息
	  [ec2-user@ip-10-161-106-51 ~]$ iostat -dx 1
  	  	Linux 2.6.34.7-56.40.amzn1.x86_64 (ip-10-161-106-51)    07/19/2011      _x86_64_        (1 CPU)
  	  	Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
  	  	xvdap1            0.00     0.05    0.00    0.08     0.05     1.09    13.20     0.00    6.02   2.92   0.03
  	  	xvdf              0.00     0.00    0.00    0.00     0.00     0.00    46.52     0.00   49.68   3.32   0.00
  	  	
  	  	Device:         rrqm/s   wrqm/s     r/s     w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
  	  	xvdap1            0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
  	  	xvdf              0.00     0.00    0.00    0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
	  #Note: 开头显示的是自系统启动开始的平均值，后面显示的是每段时间间隔里的平均值
	  相关参数含义：
		rrqm/s		队列中每秒钟合并的读请求数量
		wrqm/s		队列中每秒钟合并的写请求数量
		r/s		每秒钟完成的读请求数量
		w/s		每秒钟完成的写请求数量
		rsec/s		每秒钟读取的扇区数量
		wsec/s		每秒钟写入的扇区数量
		avgrq-sz	平均请求扇区的大小
		avgqu-sz	平均请求队列的长度
		await		平均每次请求的等待时间
		svctm		平均每次请求的等待时间
		util		设备的利用率
	  这些参数的含义（相对重要的是后面几个）
		util: 设备的利用率。如果它接近100%，通常说明设备能力趋于饱和（并不绝对，比如设备有写缓冲）
		      有时会出现大于100%的情况，这是因为读取数据的时候并非原子操作.
              util的计算方法: rate(time_spent_doing_I/Os[1m]). time_spent_doing_io表示该时间区间内有IO操作的时间，\
                  如果是100%，就表示该时间区间内持续有IO操作。对于单个本地盘，就可以表示磁盘负载较高，但是对于分布式\
                  存储，后端有很多个磁盘，IO虽然是连续的，但是可能落在不同磁盘上，因此util达到100%不能说明存储出现性能问题。
		svctm: 平均每次请求的服务时间，(r/s+w/s)*(svctm/1000)=util
		       eg.如果util达到100%，那么svctm=1000/(r/s+w/s),假设IOPS是1000，那么svctm大概在1ms左右，\
			如果长时间大于这个数值，说明系统出了问题
		#Note:svctm参数在未来某个版本的iostat会被删除
		await: 平均每次请求的等待时间，这个时间包括了队列时间和服务时间
               在Linux上，每个I/O的平均耗时是用await表示的，但它不能反映硬盘设备的性能，因为await不仅 \
               包括硬盘设备处理I/O的时间，还包括了在队列中等待的时间。I/O请求在队列中的时候尚未发送给硬盘设备，\
               即队列中的等待时间不是硬盘设备消耗的，所以说await体现不了硬盘设备的速度，内核的问题 \
               比如I/O调度器什么的也有可能导致await变大。那么有没有哪个指标可以衡量硬盘设备的性能呢？\
               非常遗憾的是，iostat(1)和sar(1)都没有，这是因为它们所依赖的/proc/diskstats不提供这项数据.
		avgqu-sz: 平均请求队列的长度。毫无疑问，队列长度越短越好
	#Note:有时候iostat会显示一些很离谱的结果，官方FAQ的解释是：http://sebastien.godard.pagesperso-orange.fr/faq.html	

    /proc/diskstats 含义
    https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats

		 1 - major number
		 2 - minor mumber
		 3 - device name
         4 - reads completed successfully
		 5 - reads merged
		 6 - sectors read
         7 - (rd_ticks) time spent reading (ms)
         8 - writes completed
		 9 - writes merged
		10 - sectors written
        11 - (wr_ticks) time spent writing (ms)
        12 - (in_flight) I/Os currently in progress
        13 - (io_ticks) time spent doing I/Os (ms)
		14 - weighted time spent doing I/Os (ms)

		Kernel 4.18+ appends four more fields for discard
		tracking putting the total at 18:

		15 - discards completed successfully
		16 - discards merged
		17 - sectors discarded
		18 - time spent discarding

		For more details refer to Documentation/iostats.txt

    python版本的iostat
    https: //github.com/idning/iostat-py
    
    请注意io_ticks与rd_ticks(字段#7)和wr_ticks(字段#11)的区别，rd_ticks和wr_ticks是把每一个I/O所消耗的时间累加在一起，因为硬盘设备通常可以并行处理多个I/O，所以rd_ticks和wr_ticks往往会比自然时间大。而io_ticks表示该设备有I/O（即非空闲）的时间，不考虑I/O有多少，只考虑有没有。在实际计算时，字段#12(in_flight)不为零的时候io_ticks保持计时，字段#12(in_flight)为零的时候io_ticks停止计时。

    参考文档
    http://www.udpwork.com/item/12931.html
    http://linuxperf.com/?p=156

#ip
    ip [OPTIONS] OBJECT [COMMAND [ARGUMENTS]]
    ip link #配置网络设备
        启动eth0
        $ ip link set dev eth0 up
        显示设备属性
        $ ip link show --
    ip route
        显示路由表
        $ ip route show
        view the local routing table
        $ ip route show table local
        The routing cache is used by the kernel as a lookup table analogous to a quick reference card
        $ ip route show cache 192.168.100.17
        or
        $ ip -s route show cach 192.168.100.17
        增加静态路由
        $ ip route add 10.38.0.0/24 via 192.168.100.1
        增加禁止路由
        $ ip route add prohibit 209.10.26.51
        也可以使用iptables REJECT达到同样目的，二者的错误提示不一样，prohibit提示'No route to host', iptables提示'connection refused'
        使用src
        $ ip route add default via 205.254.211.254 src 205.254.211.198 table 7
        增加默认路由
        $ ip route add default via 192.168.199.254
    使用ip route设置NAT（需要注意的是，这只是设置NAT网络的一部分，你还需要配合ip rule add nat来使用）
        $ ip route add nat 205.254.211.17 via 192.168.100.17
        $ ip route add nat 205.254.211.32/29 via 192.168.100.32
        $ ip routw show table local |grep ^nat
    使用ip route删除路由
        $ ip route del 10.38.0.0/16 via 192.168.100.1 dev eth3
    ip route change
        $ ip route change default via 192.168.100.99 dev eth0
    测试路由是否生效
        $ ip -s route get 127.0.0.1/32
        ip -s route get 127.0.0.1/32
        local 127.0.0.1 dev lo  src 127.0.0.1 
            cache <local>  users 1 used 1 mtu 16436 advmss 16396
    清空路由表
        $ ip route flush
        "ip route flush" requires arguments
        $ ip route flush 10.38.0.0/16
        $ ip route flush main   #清空整个路由表
    清空路由表缓存
        $ ip route flush cache
#iptraf
	#iptraf command is interactive colorful IP LAN monitor. It is an ncurses-based IP LAN\
		monitor that generates various network statistics including TCP info, UDP counts,\
		ICMP and OSPF information,Ethernet load info, node stats, IP checksum errors, and \
		others. 
#ls
	#显示最后一次执行的命令中修改的文件
		$ls -t
	#每行显示一个条目
		$ls -l
	#显示文件大小：根据大小自动显示为KB,MB,GB
		$ls -lh
	#显示文件上次修改时间
		$ls -lt		
		#将当前的时间排序反过来
			$ls -ltr
	#递归显示文件
		$ls -R
	#显示文件的uid和gid：
		$ls -n
	#在颜色不明显分辨时，使不同的文件显示不同的效果（/-目录，@-链接文件，*-可执行文件，=-socket文件）
#lsblk
	用于查看linux下块设备
	该工具属于util-linux包，最大的特别是可以把所有的块设备列出，而且还能显示他们之间的依赖关系
#lscpu
	类似于/proc/cpuinfo
#lsof
	$lsof
	COMMAND	PID	USER	FD	TYPE	DEVICE	SIZE/OFF	NODE	NAME
	init	1	root	cwd	VDIR	136,8	1024		2	/
	vi	2013	cinder	3u	VREG	136,8	0		8501	/var/tmp/ExXDa07d
	解释：
	  Command,PID和User列分别表示进程的名称，进程标识符和所有者名称
	  Device,SIZE/OFF,Node和Name列涉及到文件本身的信息，分别表示指定磁盘的名称，文件的大小，索引节点（文件\
		在磁盘上的标识）和该文件的确切名称，根据UNIX版本的不同，可能将文件的大小报告为应用程序在文件中\
		进行读取的当前位置（偏移量）
	  FD列表示文件描述符，其值可能是cwd(表示应用程序的当前工作目录)，txt(程序代码)，数字+状态(数字是文件\
		描述符，状态有u(读取/写入),r只读(),w(只写))。大多数应用程序的FD是从3开始的，0,1,2分别表示标准\
		输入，输出和错误流
	  Type列提供了关于文件格式的更多描述。根据具体操作系统不同，可能将文件和目录称为REG和DIR（Solaris称为\
		VREG和VDIR），其他可能的取值是CHR和BLK，分别表示字符和块设备，或者UNIX,FIFO,IPv4，分别表示UNIX\
		域套接字，先进先出队列和IP套接字
        1.查看对某个文件的使用情况
          查看哪些进程对某个文件进行了调用
          eg.   $lsof /var/log/mysqld.log
          #显示打开指定文件的所有进程
          /tmp目录被垃圾文件塞满了，但是，用ls又看不到太大文件，谁干的
          eg.   $lsof /tmp
          #无法卸载
          查看谁令mount的分区无法卸载
          $lsof <file_system_name>
	2.显示目录下被进程打开的文件
      	  $lsof +d /DIR/		
	  $lsof	+D /DIR/	#会搜索目录下的所有目录，时间相对较长
	3.显示指定文件描述符的进程
	  $lsof -d FD
        4.查找打开，但是不能连接的文件
          一个进程打开一个文件，然后将其设为unlinked状态，则此文件资源仍能被进程使用，但是其访问路径已经被删除了\
                因此，使用ls不能将其列出，只有当进程结束时，才能释放文件占用的资源
          查找unlinked文件，选项+L，作用：列出打开文件的连接数
          eg.   $lsof +L
          指定连接数的上限
          $lsof +L1
	  同时指定多个参数，需要加上-a参数，否则缺省的情况是显示匹配任何一个参数(OR)
          $lsof -a -p 605 -d ^txt	#-a参数表示所有参数都必须满足(AND)
        5.用以显示符合条件的进程情况
	  $lsof -i[46] [protocol][@hostname|hostaddr][:service|port]
          #查看监听端口的进程
          $lsof -i
	  $lsof -i:80		#查看80端口被谁占用
          #搜索活动的连接
          $lsof -i @192.168.1.10
          $lsof -i tcp@aaa.bbb.ccc:ftp-data     #指定协议
          $lsof -i 4    #指定IP版本
          $lsof -i 6
        7.识别netstat链接
          6中的aaa.bbb.ccc:port可以通过"$netstat -ptn"得到
        8.查找针对某个命令打开的文件
          使用命令的PID
          $lsof -p <PID>
          使用命令名称
          $lsof -c <first_characters_of_command_name_that_interest_you>
          $lsof -c mysqld
          查看打开某个文件的应用程序
          $lsof /tmp/mysql.sock
        9.显示所属user进程打开的文件
          $id -u cinder
          502
          $lsof -u 502 or $lsof -u cinder
          $lsof -u ^cinder #是取反的意思
	  $lsof -g gid	#显示归属gid的进程情况
	10.恢复删除的文件
	  当进程打开了某个文件，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中
	  eg.删除了apache的error_log
	  $lsof | grep error_log	#获得error_log的pid和文件描述符(FD)
	  $cat /proc/$PID/fd/$FD > /$path/error_log	#使用IO重定向将其复制到临时位置，再移到所需位置
man
        -a      显示所有匹配项
        -d      显示man查照手册文件时候，搜索路径信息，不显示手册页内容
        -D      同-d，显示手册页内容
        -f      同命令whatis，将在whatis数据库查找以关键字开头的帮助索引信息
        -h      显示帮助信息
        -k      同命令apropos，将搜索whatis数据库，模糊查找关键字
        ...       
	man(1)	用户命令
	man(2)	C的系统调用
	man(3)	C的库函数调用
	man(4)	即/dev目录下的特殊文件
	man(5)	文件格式与协议，比如/etc/passwd
	man(6)	游戏
	man(7)	杂项，例如宏命令，惯例等
	man(8)	系统管理工具
	man(9)	其他(linux)特定的，用来存放内核例行程序的文档
        通常遇到一个不是很熟悉的命令，可以先通过：
        $man -k command1        查找所有类似帮助文件信息，这样输出最多
        $man -f command1        查询以command1开头所有相关帮助信息列表
        $man 5 command1         通过直接定位5获得帮助信息
#mpstat
	#display activities for each available processor, processor, processor 0 being the first\
		one. 
		$mpstat -P ALL	#display average CPU utilization per processor
#netstat
	#display network connections, routing tables, interface statistics, masquerade connections, and multicast memberships.
#nmon
	http://nmon.sourceforge.net/pmwiki.php
	#nmon工具可以为AIX和Linux提供监视和分析性能数据的功能，其中包括：
		*CPU使用率
		*内存使用情况
		*内核统计信息和运行队列信息
		*文件系统中的可用空间
		*磁盘适配器
		*网络I/O速度、传输和读/写比率
		*页面空间和页面速度
		*CPU和AIX规范
		*消耗资源最多的进程
		*IBM HTTP Web缓存
		*用户自定义的磁盘组
		*计算机详细信息和资源
		*异步I/O，仅适用于AIX
		*工作负载管理器（WLM），仅适用于AIX
		*IBM TotalStorage Enterprise Storage Server(Ess)磁盘，仅适用于AIX
		*网络文件系统（NFS）
		*动态LPAR(DLPAR)更改，仅适用于面向AIX或Linux的pSeries p5和OpenPower
		#还包括一个用来从nmon的输出生成图形并创建可以在Web站点显示的.gif文件的新工具
#od
	od(octal dump)命令可以以八进制，十进制，十六进制和ASCII码来显示文件或者流，它们对于访问或可视地检查文\
		件中不能直接显示在终端上的字符很有用
	$od [-A 地址进制] [-t 显示格式] 文件
		-A指定地址包括：
		  o	八进制
		  d	十进制
		  x	十六进制
		  n	不打印位移值
		-t指定数据的显示格式，主要参数有:
		  c	ASCII字符或反斜杠序列(如\n)
		  d	有符号十进制数
		  f	浮点数
		  o	八进制
		  u	无符号十进制数
		  x	十六进制数
		-j 字节数	跳过指定字节数
		-N 字节数	仅显示指定字节数
		-w 字节数	每一行仅显示指定字节数	
		-v 	表示即使连续多行都是完全相同的字符0，仍然原样输出；不加该参数，则会使用*跳过多个相同的行
#paste
	#用于文件合并
	#paste f1 f2 f3
#pmap
	#report memory map of a process. Use this command to find out causes of memory bottlenecks
		$pmap -d PID
#ps
	#select all processes
		$ps -A ( $ps -e )
	#show long format output
		$ps -Al
		$ps -AlF	#turn on extra full mode
	#see threads(LWP and NLWP)
		$ps -AlFH
	#see threads after processes
		$ps -AlLm
	#print all process on the server 
		$ps ax
		$ps aux
	#print a process tree
		$ps -ejH
		$ps axjf
		$pstree
	#print security information
		$ps -eo euser,ruser,suser,fuser,f,comm,label
		$ps axZ
		$ps -eM
	#see every process running as user cinder
		$ps -U cinder -u cinder u
	#see output in a user-defined format
		$ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
	#display only the process IDs of lighttpd
		$ps -C lighttpd -o pid=
		$pgrep lighttpd
		$pgrep -u cinder php-cgi
	#display the name of pid 55977
		$ps -p 55977 -o comm=
	#find out the top 10 memory consuming process
		$ps -auxf | sort -nr -k 4 | head -10
	#find out top 10 cpu consuming process
		$ps -auxf | sort -nr -k 3 | head -10
#rpm
	1.通过文件查找它属于哪个软件包
		$rpm -qf /usr/bin/multitail
		multitail-5.2.6-1.el5.rf
	2.查看rpm包大量信息
		$rpm -qip XXX.rpm
	3.查看rpm包软件里面文件列表
		$rpm -qlp XXX.rpm
	4.列出rpm包的依赖关系
		$rpm -qRp XXX.rpm
#rsync
	#参数
		-z(--compress)	开启压缩功能，--compress-level指定压缩级别，但是通常可以接受标准的压缩级别
		-v(--verbose)	打印详细信息，类似的还有--process(显示一个进度条),--stats(显示如何执行压缩和传输)
		-r(recursive)	递归同步，即会复制目录中的所有文件，--dirs(-d)会产生相反的效果：跳过子目录及其内容
		-l(--links)	会在目标目录中重新创建这些符号链接
				--copy-links(-L)复制符号链接指向的文件或目录，而不是复制符号链接本身
				--copy-unsafe-links会复制符号链接指向复制的树之外的文件或目录
				--safe-links选项忽略unsafe的链接，这更安全
		--times,--perms,--owner,--group|-tpog分别让rsync保持原来的更新时间戳，权限，所有者和组信息
		-a(archive)	包括--times,--perms,--owner,--group|tpog,--links,--recursive
		-e(--rsh)	强制使用ssh，尽管当前的rsync版本默认使用ssh，--rsh "ssh -p 12345"可以指定特殊的ssh端口
		--exclude(以及相对应的--include)选择要同步的文件夹
		--delete	建立目标源的精确拷贝，即删除DEST_PATH中和SOURCE_PATH所有不一致的部分
		-n		预览rsync将执行的操作，发现可能存在的问题
	#rsync有四种模式
		1.shell模式，即本地模式，与cp类似
		2.远程shell模式，它使用ssh执行底层连接和传输，类似于scp
		3.列表模式，与ls相似
		4.服务器模式。该模式下，rsync守护进程在一台机器上永久运行，接收文件传输请求。
		  可以把文件发送给守护进程，也可以向它请求文件。
		  服务器模式非常适合创建中心备份服务器或项目存储库
	#rsync增量备份
		--link-dest=$PATH	#它指定如果文件没有被修改过，就不把它复制到新的备份。相反，在新备份\
						#中创建一个指向现有备份中同一文件的硬链接
					#换句话说，新备份只包含已经修改过的文件，其他文件都是链接
#sar
	搜集、报告和存储系统活动信息
	
	监控项	常用的监控命令			命令说明		

	#cpu	
		sar -P ALL 2 10 > cpu.txt	2为时间间隔，10为监控次数去除ALL表示总CPU的占用；
						加上ALL，则显示各单个CPU的具体占用
		sar -u 2 10  > cpu.txt		2为时间间隔，10为监控次数，查看总CPU的占用情况
	1.%user值高，一般是业务占用的，只有cpu增长，与tps增长成正比，则正常
	2.%system，不高于5%，过高的话，可能是业务线程过多了，导致业务频繁切换可以通过
	'sar -w 1 10'来查看上下文切换情况
	3.%iowait是指cpu等待磁盘IO处理的时间，一般不高于5%，若过高，则表明存储有瓶颈

	#带宽	
		sar -n DEV 2 10 > net.txt	2为时间间隔，10为监控次数
		sar -n DEV 2 10 | grep eth1	用来监控具体的网卡，eth1(网卡名)
	1.rxpck/s,txpck/s：每秒收发的包
	2.rxbyt/s,txbyt/s：每秒收发的字节数，而一般说的100M网卡，单位是8bit，因而换算要用到：rxbyt/s*8

	#内存	
		sar -r 2 10 > mem.txt		2为时间间隔，10为监控次数
		sar -r 2 0 > mem.txt		0表示无限次
	1.kbmemfree+kbbuffers+kbcached，这三个值的和才是系统真正空闲可供使用的内存
	2.kbmemused表示已使用的内存，%memused表示使用率，总的系统内存为：kbmemused/%memused*100

	#IO	
		sar -x sdc sde -d -t 2>io.txt	这里的sdc,sde是设备名称，可通过fdisk命令获取到
		sar -d 2 10 > io.txt		用来监控每个设备的IOPS(tps)
		sar -b 2 10 > io.txt		用来监控总的IOPS(tps)
	1.rrqm/s,wrqm/s一般不关注
	2.r/s,w/s：表示每秒主机发送给磁盘的读写请求，也就是IOPS，测试时需要关注这两个值是否达到磁盘
	阵列的极限
	3.rsec/s,wsec/s：每秒读写的块，linux中，一个section为512byte，一般是(rsec/s)/2=rkb/s,wkb/s/2就是
	wkb/s(这里得出的rkb/s,wkb/s就是磁盘效率)
	4.avgqu-sz:平均队列长度，表示主机的读写请求队列排队情况，若大于5，表示磁盘阵列已经处理不过来了，
	await与它成正比
	5.svctm：请求在磁盘完成所使用的时间，请求从主机发送磁盘再由磁盘返回数据的时间
#screen
	screen可以在一个控制台（即与主机物理连接的哑终端），xterm窗口或者ssh登录shell中创建和管理多个shell窗口\
		可以从一个shell窗口迅速切换到另一个窗口，可以离开正在运行的shell并在任何时候重新连接。实际上，\
		screen提供许多虚拟化的控制台。简单来说，screen是一个可以在多个进程之间多路复用一个物理终端的窗口\
		管理器，在每一个screen窗口中就像操作一个真实的telnet/ssh连接窗口那样
	$screen 可以在screen中启动一个新窗口，在该窗口中键入exit退出该窗口，如果这是该screen会话的唯一窗口，该\
		screen会话退出
		如果已经在一个screen会话中，可以用C-a c来生成一个新的窗口并切换到该窗口
	一般命令
		screen -list|-ls列出当前开启的screen会话
		C-a d		不中断screen窗口中的程序的运行而暂时断开(detach)screen会话
		screen -r 	重新连接(attach)之前被detach的会话
		eg.$screen -list
		   There is a screen on:
		   	16583.pts-1.tivf06	(Detached)
		   1 Socet in /tmp/screens/S-root
		   #重新连接
		   $screen -r 16583	
		screen -c file	使用配置文件file，而不使用默认的$HOME/.screenrc
		screen -d|-D [pid.tty.host]	不开启新的screen会话，而是断开其他正在运行的screen会话
		screen -x 	多用户模式（用于share同一窗口时）
		screen -t windowname	创建窗口windowname（可以和-S同时使用，创建指定screen的指定窗口）
		screen -p windowname	打开窗口windowname（可以和-S同时使用，打开指定screen的指定窗口）
		-d -m		启动一个一开始就处于断开模式的会话（更常用的搭配是$screen -dmS sessionname）
		-wipe [match]	通-list，但删掉那些无法连接(dead)的会话
	其他命令
		C-a ?	显示所有键绑定信息

		C-a w	显示所有窗口列表
		C-a C-a	切换到之前显示的窗口
		C-a c	创建一个新的运行shell的窗口并切换到该窗口
		C-a n	切换到下一个窗口
		C-a p 	切换到前一个窗口（与C-a n相对）
		C-a 0..9切换到窗口0..9
		C-a "	显示当前screen会话的窗口列表(比C-a w好用) 	"

		C-a a	发送C-a到当前窗口（又可以使用回到行首了）
		C-a d	暂时断开screen会话（detached）
		C-a k	杀掉当前窗口（注意窗口和screen会话的区别）
		C-a A	set window title
		C-a [	进入拷贝/回滚模式
		C-a ]	paste buffer
		C-a >	write paster buffer to file(useful for copying between screens)
		C-a <	read paster buffer from file

		C-a S	在当前窗口水平分割一个新的窗口
		C-a |	在当前窗口垂直分割一个新的窗口（需要screen补丁支持）
		C-a :	goto screen command prompt(up shows last command entered)
		C-a :resize	resize当前窗口大小
		C-a :fit|F	fit screen size to new terminal size, do after resizing xterm
		C-a :remove|X	用于分屏窗口时关闭一个小窗口（当前小窗口）
		C-a tab	切换到下一个小窗口（用于分屏时）

		C-a S sessionname	创建screen会话时为会话指定一个名字
		C-a r sessionowner/[pid.tty.host]	重新连接一个断开(detached)的会话，
							多用户模式下连接到其他用户screen会话需要指定sessionowner，
							需要setuid-root权限

		screen使用C-a作为screen命令的开始，所以如果想要screen窗口接收到C-a字符，就要输入C-a a。screen\
			也允许使用-e选项设置自己的命令字符和转义字符，其格式为：
			-exy x为命令字符，y为转义命令字符的字符
			eg. $screen -e^tt	#指定命令字符为C-t，转义为C-t的字符为t，通过C-t ?命令可以看到该变化
#sort
	排序失败问题
	============
	有时可能遇到sort filename时，排序不正常的现象。查看sort的manual，有如下解释：
	         ***  WARNING  ***  The locale specified by the environment affects sort
		order.  Set LC_ALL=C to get the traditional sort order that uses native
		byte values.
	查看系统的语言设置:
	       $locale
	另外有人指出只指定LC_COLLATE=C就可以了，理由是：
	       This variable determines the locale category for character collation.
	       It determines collation information for regular expressions and sorting,
	       including equivalence classes and multi-character collating elements,
	       in various utilities and the strcoll() and strxfrm() functions.
	       Additional semantics of this variable, if any, are implementation-dependent.
	但是只设置LC_COLLATE有两个问题：
	       1.如果同时设置了LC_ALL的话，由于LC_ALL的优先级比较高，会覆盖LC_COLLATE的设置，
	       比如，如果LC_ALL=utf-8，那么sort同样可能失败
	       2.如果LC_CTYPE或者LANG(当LC_CTYPE没被设置时)被设置为和LC_COLLATE不兼容的值，
	       比如：LC_CTYPE='ja_JP.PCK'，但LC_COLLATE='en_Us.UTF-8'，sort同样可能失败
	为了保证系统的其他部分不会因为修改系统环境而受影响，建议使用sort的时候临时修改,比如：
	       $tmp=$LC_ALL; epxort LC_ALL=C && sort FileName; LC_ALL=$tmp
#ss
	#ss command is used to dump socket statistics. It allows showing information similar to\
		netstat.

#strace
	#trace system calls and signals.This is useful for debugging webserver and other server problems.
	#trace 能够显示所有由用户空间程序发出的系统调用
	strace常用来跟踪进程执行时的系统调用和所接收的信号。
	在linux世界中，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，
		必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统
		调用，包括参数，返回值，执行消耗的时间
	-f	告诉strace同时跟踪fork和vfork出来的进程
	-o xxx.txt	输出到某个文件
	-e execve	只记录execve这类系统调用
	-p pid	跟踪指定的进程，此参数常用来调试后台进程
	-r	打印每一个系统调用的相对时间
	-t	在输出中的每一行前加上时间信息
	-tt	时间精确到微秒级
	-ttt	打印相对时间
    -T 显示每一调用所耗的时间
	-v	输出所有系统调用。默认情况下，一些频繁调用的系统调用不会输出
	-c	统计每种系统调用所执行的时间，调用次数，出错次数
	-e expr	输出过滤器，通过表达式，可以过滤掉你不想要的输出
    #通用示例
    strace -o output.txt -T -tt -e trace=all -p 28979
    上面的含义是 跟踪28979进程的所有系统调用（-e trace=all），并统计系统调用的花费时间，以及开始时间（并以可视化的时分秒格式显示），最后将记录结果存在output.txt文件里面。
#su & sudo
	#su
		直接切换为超级用户
		普通用户要切换为超级用户必须知道超级用户的口令
		适用于系统中只有单个系统管理员的情况
	#sudo
		直接使用sudo命令前缀执行系统管理命令
		执行系统管理员命令时无需知道超级用户的口令，使用普通用户自己的口令即可
		由于执行系统管理员命令时无需知晓超级用户口令，所以适用于系统中有多个系统管理员的情况，当然\
		单个管理员时也可以使用。
	#su	
		su [-|-p] [-c command] [username]
		- : 在切换当前用户时切换用户工作环境
		-p ：在切换当前用户时不切换用户工作环境，即保持当前用户工作环境，此为缺省值
		-c command : 以指定的用户身份执行命令command
		username : 为要切换的用户，省略时表示root
	#sudo
		#简介：允许系统管理员为几个用户或组委派权利，使之能运行部分或全部由root（或另一个）用户执行\
			的命令。宗旨：给用户尽可能少的权限但仍允许完成他们的工作，sudo是设置了SUID位的执行文件
		#特点：
			sudo能够限制用户在指定主机上运行某些命令
			sudo可以提供日志，忠实的记录每个用户使用sudo做了些什么，并且能将日志传到中心主机或者日志\
				服务器。
			sudo为系统管理员提供配置文件，允许系统管理员集中的管理用户的使用权限和使用的主机。它默认\
				的存放位置是/etc/sudoers
			sudo使用时间戳文件来完成类似“检票”的系统。当用户执行sudo并且输入密码后，用户获得了一张默认\
				存活期为5分钟的“入场券”（默认值可以在编译时改变）。超时以后，用户必须重新输入密码。
		#用户执行sudo的执行过程
			1.在/var/run/sudo/$HOME目录中查找时间戳文件
			2.读取配置文件/etc/sudoers，判断用户是否有执行此sudo命令的权限
	#sudo命令格式
		sudo -V | -h | -k | -l | -v
		sudo [-Hh] [-u username|#uid] {-i | -s <command>}

		-v : 显示版本信息，并退出。
		-h : 显示帮助信息
		-l : 显示当前用户（执行sudo的使用者）的权限，只有在/etc/sudoers里的用户才能使用该选项。
		-v : 延长密码有效期限5分钟。
		-k : 将会强迫使用者在下一次执行sudo时问密码（不论有没有超过5分钟）
		-H : 将环境变量中的$HOME指定为要变更身份的使用者目录（如不加-u参数就是/root）
		-b : 在后台执行指令
		-u : username |#uid :以指定的用户作为新的身份。省略此参数表示以root的身份执行指令。
		-i : 模拟一个新用户身份的初始shell
		-s : 执行环境变量$SHELL所指定的shell，或是/etc/passwd里所指定的shell
		command : 以新用户身份要执行的命令。
	#配置sudo
		#/etc/sudoers的组成部分
			1.别名定义部分：包括User_Alias,Host_Alias,Runas_Alias,Cmnd_Alias
			2.配置选项部分：由Defaults设置
			3.User Host = (Runas)			Cmd
			  用户 主机  （可切换的其他用户）	可执行的命令
		#说明：
			1.在cmnd部分之间可以使用NOPASSWD:参数，表示不用输入密码即可执行cmnd
			2.(Runas)部分可以省略，省略时表示(root)，即表示仅能切换为root用户身份
			3.四个部分均可设置多个项目，每个项目用逗号间隔
			4.四个部分均可使用别名定义来简化配置，即用User_Alias定义用户别名、用Host_Alias定义主机别名\
				用Runas_Alias定义切换用户别名、用Cmnd_Alias定义命令别名。别名必须使用大写字母。
			别名格式：
				User_Alias USER_ALIAS_NAME = user1, user2, ......
				Host_Alias HOST_ALIAS_NAME = host1, host2, ......
				Runas_Alias RUNAS_ALIAS_NAME = runas1, runas2, ......
				Cmnd_Alias COMMAND_ALIAS_NAME = cmnd1, cmnd2, ......
		#配置片段：
			详见：https://docs.google.com/document/pub?id=12wW2gTEVMc-8cRhkd0qUX-lQQAKlQVSZY1BIPcuaUMI
			让osmond用户和wheel组的成员可以在任何主机上以任何人的身份运行任何命令
			专职系统管理员(millert,mikef和dowdy)可以在任何主机上执行任何命令而不需要进行身份验证
			兼职系统管理员(bostley,jwfox和crawl)可以在任何主机上运行任何命令
			兼职管理员(jalala, sonar和huge)可以在任何主机上运行 BROWSE、PROCESSES、USERS 中的命令
			允许sys 组的成员运行 networking, software, service 等管理命令
			WEBMASTERS(will, wendy,和 wim)中的用户都能够在主机www上以www的身份执行任何命令，或者使用 su www 命令
#tail
	-f	可以及时看到文件的变化。如果再加上一个grep命令，可能看到的就不那么及时了。因为grep在buffer写不\
			满时就不输出，可以通过选项--line-buffered来搞定。
		eg. $tail -f file.txt | grep something --line-buffered
#tcpdump
	#detailed network traffic analysis
	#display traffic info about http
		$tcpdump -i eth0 'tcp port 80'
        $tcpdump -s 0 -A 'tcp dst port 80 and (tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354)'
	#display all FTP session to 202.54.1.5
		$tcpdump -i eth1 'dst 202.54.1.5 and port 20 or 21'
    抓取tcp流量
        $tcpdump tcp port 80 -n -s 0 -w /tmp/tcp.cap
    抓取dhcp流量
        $tcpdump -i eth0 -tnn port 67
#tmpwatch
	/usr/sbin/tmpwatch -m 30d /opt/resin/log/	删除某目录下30天后的过期日志，日期默认是小时，这里指定为天
#top
	#根据一些参数将性能排序
		使用-O选项进入选择菜单，选择相关字母（大写向上调整，小写向下调整）即可根据参数排序
	#高亮显示
		按z或者b
	#改变刷新top命令的时间间隔（默认是3s）
		按d，显示：$delay from 3.0 to:
	#显示/隐藏进程的路径
		按c键
	#设定top查看性能次数-当刷新指定次数后自动退出
		$top -n 你指定的次数
	#display summary information off/on
		按t
	#display memory information off/on
		按m
	#快速列出使用各类资源的top consumers
		按A
	#定制top默认能显示的项
		按f
	#issues kill command
		按k
	#top中PR和NI(priority和nice)的区别
		PR表示目前系统分配给该process的优先权，而若是特别要调整该process的优先权的话，通过提高或降低NI的数值可让PR变化。
		PR由系统内定自行调整，要把所有process的NI值都考虑进来，调度程序才能决定一个process的PR。
	#通过top查看某程序的内存占用
		VIRT	virtual image(kb), The total amount of virtual memory used by the task. It include all code, data and shared
			libraries plus pages that have been swapped out
			VIRT = SWAP + RES
		SWAP	swapped size(kb), The swapped out portion of a task total virtual memory image
		RES	resident size(kb), The non-swapped physical memory a task has used
			RES = CODE + DATA
		CODE	code size(kb), The amount of physical memory devoted to executable code, also known as the 'text resident
			set' size or TRS
		DATA	Data + Stack size(kb), The amount of physical memory devoted to other than executable code, also known as
			the 'data resident set' size or DRS
		SHR	shared mem size(kb), The amount of shared memory used by a task. It simply reflects memory that could be
			potentially shared with other processes

#ulimit
	ulimit用于shell启动进程所占用的资源
	ulimit [-acdfHlmnpsStvw][size]
	-H	设置硬件资源限制
	-S	设置软件资源限制
	-a	显示当前所有的资源限制
	-c size	设置core文件的最大值，单位blocks
	-d size	设置数据段的最大值，单位kbytes
	-f size	设置创建文件的最大值，单位blocks
	-l size	设置在内存中锁定进程的最大值，单位kbytes
	-m size	设置可以使用的常驻内存的最大值，单位kbytes
	-n size	设置内核可以同时打开的文件描述符的最大值，单位n
	-p size	设置管道缓冲区的最大值，单位kbytes
	-s size	设置堆栈的最大值，单位kbytes
	-t size	设置CPU使用时间的最大上限，单位seconds
	-v size	设置虚拟内存的最大值，单位kbytes
	#example
	  1.段错误(segmentation fault)，主要是由于linux系统初始的堆栈大小(stack size)太小的缘故，一般为10M
	  $ulimit -s 262140	#设置成256M，
	#如果需要系统记住ulimit的设置，需要编辑/etc/profile，在"ulimit -S -c 0 > /dev/null 2>&1"行下，添加\
		#"ulimit -s 262140"，保存重启即可
	  2.对由shell创建的文件大小做限制
	  $ulimit -f 100	#设置创建文件的最大块(一块=512字节)
#uptime
	#tell how long the system has been running
	[root@www2 init.d]# uptime
	7:51pm up 2 days, 5:43, 2 users, load average: 8.13, 5.90, 4.94
	the uptime command can be used to see how long the server has been running .the current time, how many\
		users are currently logged on, and the system load averages for the past 1,5, and 15 minutes
	一般来说只要每个CPU的当前活动进程数不大于3那么系统的性能就是良好的，如果每个CPU的任务数大于5，那么就\
		表示这台的性能有严重问题（比如上面的例子，如果假设有2个CPU，那么每个CPU的当前任务数是：8.13/2=4.65）\
		，表示该系统的性能是可以接受的
#vmstat
	#reports information about processes,memory,paging,block IO,traps,and cpu activity
		for example	$vmstat 3
		$vmstat -m	#display memory utilization slabinfo
		$vmstat -a	#get information about active/inactive memory pages
#w
	#display information about the users currently on the machine, and their processes
		$w username
		$w cinder
#watch
	#当想重复一个命令或者shell脚本（只间隔几秒），可以使用watch
	watch runs commands repeatedly, displaying its output and errors ( the first screenfull).
	This allow you to watch the program output change over time
	By default, the program is run every 2 seconds
	1.方便查看日志文件以及其他增长型文件的速度
		$watch ls
	2.-d选项高亮，对变化的数值突出显示
		$watch -d free -m
	3.-n选项指定watch间隔，-t选项去掉第一行多余信息
		$watch -n 10 -t free -m
#wget
	-c
		断点续传
	-r	
		递归下载，下载指定网页某一目录下(包括子目录)的所有文件，
		NOTE:同时会搜索上层目录;并按照指定url的结构创建一层层目录;如果指定url包含其他网站链接，也会递归下载其他链接的所有目录
	-nd
		递归下载时不创建一层一层的目录，把所有的文件下载到当前目录
	-np
		递归下载时不搜索上层目录
	-k
		将绝对链接转换为相对链接。如果需要脱机浏览网站，最好加上该参数
	-L
		递归时不进入其他主机，如wget -c -r www.xxx.org，如果网站内含有链接www.xxx.net，不加-L，wget会递归下载xxx.net网站
	-p
		下载网页所需要的所有文件，如图片等
	-i
		后面跟一个文件，文件内指明要下载的URL
	#通常下载单个文件的方式
		$wget http://hotfile.com/dl/97851370/9727f76/backups-DN22006-sUN.part03.rar	
	#下载一个和下载地址文件名不同的文件
		默认wget会自动分隔最后一个斜线的后面作为文件名，正常下载模式：
			$wget http://www.aaa.com/test/download.php?src_id=02
			下载后：
			$ls
			download_.php?src_id=02
		可以使用-O选项解决：
			$wget –O test.zip http://www.aaa.com/test/download.php?src_id=02
			下载后：
			$ls
			test.zip
	#指定下载速度
		$wget -limit-rate=100k http://limit.com/test.tar.gz
	#断点续传
		使用-c选项	
	#后台下载
		-b选项进行后台下载，wget在后台继续运行，并把输出写至"wget-log"，查看日志
		$tail -l wget-log	
	#当下载多个内容时，可以将这些地址放到一个文件中，然后下载这个文件。
		$cat download_file_list.txt
		url1
		url2
		url3
		...
		$wget -i download_file_list.txt
	#下载一个站点
		$wget --mirror -p -convert-links -P localhost www.tontin.me
	#限制下载的类型
		$wget -R *.jpg www.tontin.me
		$wget --reject=jpg www.tontin.me
	#记录下载日志
		$wget -o /var/log/wget.log www.tontin.me
	#仅下载某些类型的文件
		$wget -r -A *.pdf mirrors.sohu.com/ebook
		# -r recursive
		# -A --accept acclist
		# -A *.pdf will match file1.pdf, but also file2.PDF, if you use --ignore-case
	#使用用户名和密码下载文件，包括ftp和http
		$wget --user=USERNAME --password=PASSWORD www.tontin.me
		#these parameters can be overridden using the --ftp-user and --ftp-password options for FTP\
		# connections and the --http-user and --http-password options for HTTP connections.
#whoami,id,groups,newgrp
	whoami		#用于显示当前用户的名称
	groups		#用于显示指定用户所属的组
	id		#用于显示用户身份
	newgrp		#用于转换用户的当前组到指定的附加组，用户必须属于该组才可以进行
#xargs
	xargs reads items from the standard input, delimited by blanks (which can be protected with  \
	 double or  single  quotes  or a backslash) or newlines,
	可以使用xargs将输出的多行合并为一行，以空格分隔
	$pgrep mysql
	 8988
	 9021
	$pgrep mysql | xargs
	 8988 9021
	$pgrep -d, mysql
	 8988,9021
	$pgrep -d" " mysql
	 8988 9021
#zip,tar.gz,tar.bz2
	zip	
		压缩
		$zip -r archive_name.zip directory_to_compress
		解压
		$unzip archive_name.zip
	tar
		压缩
		$tar -cvf archive_name.tar directory_to_compress
		解压
		$tar xvf archive_name.tar
		解压到指定目录
		$tar xvf archive_name.tar -C /tmp/extract_here/
	tar.gz
		$tar -zcvf archive_name.tar.gz directory_to_compress
		$tar -zxvf archive_name.tar.gz -C /tmp/extract_here/
	tar.bz2
		$tar -jcvf archive_name.tar.bz2 directory_to_compress	
		$tar -zxvf archive_name.tar.bz2 -C /tmp/extract_here/
	.gz
		$gzip FileName
		$gunzip FileName.gz
		$gzip -d FileName.gz
	.bz2
		$bzip2 -z FileName
		$bzip2 -d FileName.bz2
		$bunzip2 FileName.bz2
	.Z
		$compress FileName
		$uncompress FileName.Z
	.tar.Z
		$tar Zcvf FileName.tar.Z DirName
		$tar Zxvf FileName.tar.Z
	.tgz
		$tar zxvf FileName.tgz
	.tar.tgz
		$tar zcvf FileName.tar.tgz FileName	
		$tar zxvf FileName.tar.tgz 
	.rar
		$rar e FileName.rar FileName
		$rar a FileName.rar
	rpm	
		解包
		$rpm2cpio FileName.rpm | cpio -div
#管道 |
	管道，即把一个程序的输出作为另一个程序的输入。
	ls这种程序根本不理睬标准输入(stdin)，所以 执行 `echo a b | ls`的话，ls根本不会理睬echo给它的文件列表。
		xargs命令从标准输入读取，并将其作为参数构建命令行。如果执行 ·echo a b | xargs ls·，xargs会从
		标准输入读到a和b两行字符，把它们作为两个参数交给程序ls，于是xargs执行ls a b
	有些程序既可以从标准输入读到数据，也可以从文件读取，如sed
		$echo a b | sed 's/a/c/'	#echo输出一个列表，利用sed把其中每行的第一个a替换成c，再输出
		c b
		$echo a b | xargs sed 's/a/c/'	#echo输出一个列表，sed把这些文件的内容中出现的a替换成b再输出
